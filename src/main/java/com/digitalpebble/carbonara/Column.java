/**
 * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.  The ASF licenses this file to you under the Apache License, Version
 * 2.0 (the "License"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */

package com.digitalpebble.carbonara;

import org.apache.spark.sql.Row;
import org.apache.spark.sql.types.DataType;

/**
 * Abstraction for columns. These can be either generated by the EnrichmentModules or coming from CUR reports.
 **/
public abstract class Column {

    private final String label;
    private final DataType type;

    Column(String l, DataType t) {
        label = l;
        type = t;
    }

    /**
     * Returns the label of the column e.g. line_item_line_item_type
     **/
    public String getLabel() {
        return label;
    }

    /**
     * Returns the type of the column e.g. StringType
     **/
    public DataType getType() {
        return type;
    }

    /**
     * Utility method to get the value for the column in the row
     **/
    public double getDouble(Row r) {
        final int index = r.fieldIndex(this.label);
        return r.getDouble(index);
    }

    /**
     * Utility method to get the value for the column in the row or null if it does not exist
     **/
    public String getString(Row r) {
        final int index = r.fieldIndex(this.label);
        return r.getString(index);
    }

    /**
     * Utility method to get check that a value is non null
     **/
    public boolean isNullAt(Row r) {
        final int index = r.fieldIndex(this.label);
        return r.isNullAt(index);
    }
}

